name: Integration Test
on:
  workflow_dispatch:
    inputs:
      mongoVersion:
        description: 'Mongo Version'     
        required: true
        default: '4.0'
env:
  AZURITE_ACCOUNT: "devstoreaccount1"
  AZURITE_MASTER_KEY: "Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw=="
  STORAGE_CONTAINER: "az-shop-images"

jobs:
  build:
    runs-on: ubuntu-latest

    # Service containers to run with `runner-job`
    # Feature: https://github.community/t/any-ways-to-pass-arguments-to-service-containers/16826/2
    #services:
    #  azurite:
    #    image: mcr.microsoft.com/azure-storage/azurite
    #    ports:
    #      - 10000:10000
    #    options: --entrypoint azurite-blob 
    #    args: --blobHost 0.0.0.0 --blobPort 10000

    steps:
    - uses: actions/checkout@main
    
    - name: Create Azure Storage Container
      run: |
        # https://mcr.microsoft.com/v2/azure-storage/azurite/tags/list (why not a actions service)
        # https://github.com/Azure/Azurite/issues/676 (--loose)
        AZURITE_CONTAINER=$(docker create  -p 10000:10000 --entrypoint azurite-blob -e GITHUB_ACTIONS=true -e CI=true mcr.microsoft.com/azure-storage/azurite:3.15.0 --blobHost 0.0.0.0 --blobPort 10000 --loose)
        docker start $AZURITE_CONTAINER
        sleep 2
        az storage container create -n ${{ env.STORAGE_CONTAINER }} --connection-string "DefaultEndpointsProtocol=http;AccountName=${{ env.AZURITE_ACCOUNT }};AccountKey=${{ env.AZURITE_MASTER_KEY }};BlobEndpoint=http://localhost:10000/${{ env.AZURITE_ACCOUNT }};"

    - name: Start MongoDB
      uses: supercharge/mongodb-github-action@1.7.0
      with:
        mongodb-version: ${{ github.event.inputs.mongoVersion }}
        mongodb-replica-set: rs0
    

    - name: Build
      run: |

        npm -g install npm@latest
        npm i --legacy-peer-deps

        echo "Build Eventing.."
        cd common/eventing
        #npm i
        npm run build

        echo "Build Factory.."
        cd ../../factory 
        #npm i
        npm run build

        echo "Build Ordering.."
        cd ../ordering
        #npm i
        npm run build

        echo "Build Web.."
        cd ../web/web-react
        #npm i --legacy-peer-deps
        npm run-script build_lib
        npm run-script build_assets_dev

        cd ../web-server
        #npm i 
        npm run build


    - name: Run
      timeout-minutes: 1
      env:
        REACT_APP_FACTORY_PORT: "9091"
        REACT_APP_ORDERING_PORT: "9090"
        STORAGE_ACCOUNT: ${{ env.AZURITE_ACCOUNT }}
        STORAGE_MASTER_KEY: ${{ env.AZURITE_MASTER_KEY }}
        STORAGE_CONTAINER: ${{ env.STORAGE_CONTAINER }}
        MONGO_DB: "mongodb://localhost:27017/dbdev?replicaSet=rs0"
        USE_COSMOS: "false"
        PORT: 30001
      run: |
        cd ./web
        NODE_PATH=../node_modules node ./web-server/lib/server.js &
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:$PORT/healthz)" != "200" ]]; do sleep 2; done
 
        cd ../factory
        PORT=$REACT_APP_FACTORY_PORT node ./lib/factoryStartup.js &

        cd ../ordering
        PORT=$REACT_APP_ORDERING_PORT node ./lib/orderingStartup.js &

        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:$REACT_APP_FACTORY_PORT/healthz)" != "200" ]]; do sleep 2; done
        while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' localhost:$REACT_APP_ORDERING_PORT/healthz)" != "200" ]]; do sleep 2; done



    - name: Test

      run: |
        curl localhost:30001
    
 